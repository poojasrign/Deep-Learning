import tensorflow as tf
import numpy as np

# XOR input and output
X = np.array([[0,0], [0,1], [1,0], [1,1]], dtype=np.float32)
Y = np.array([[0], [1], [1], [0]], dtype=np.float32)

# Define a better model
model = tf.keras.Sequential([
    tf.keras.layers.Dense(8, input_dim=2, activation='tanh'),  # More neurons, tanh helps here
    tf.keras.layers.Dense(1, activation='sigmoid')
])

# Compile the model
model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

# Train the model
model.fit(X, Y, epochs=1000, verbose=0)

# Predict and evaluate
predictions = model.predict(X)
predicted_classes = (predictions > 0.5).astype(int)

print("Predictions:")
print(predicted_classes)

# Accuracy
loss, accuracy = model.evaluate(X, Y, verbose=0)
print(f"Accuracy: {accuracy * 100:.2f}%")
